//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Settings/Controllers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controllers : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controllers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controllers"",
    ""maps"": [
        {
            ""name"": ""Left"",
            ""id"": ""f5759854-abea-406a-8090-fd4f3303e5cd"",
            ""actions"": [
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""733b6fc4-1c2b-485d-a413-9ae583e96316"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""bde8ca92-9c1f-401e-a808-81752b5d5620"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""99df2894-86f0-409f-869b-6773cf6a1c7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""78fcfaa4-09b7-4b66-acbc-d947c20dcff4"",
                    ""path"": ""<XRController>{LeftHand}/joystick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""849309a0-4379-47bf-b7c7-3019d980e315"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36e9ad07-1a68-4e2b-85d7-ef2d1d6b3be5"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Right"",
            ""id"": ""42e9ecaf-fa52-4dd7-855e-fa0a6838d390"",
            ""actions"": [
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""7b40b6bb-eb6e-4798-8a1d-3622e2c5cf52"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""f11e0f25-7f2d-4b03-bc9b-5a67eb2e7b33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""cd66c1ab-6b53-4711-a640-cda440cec016"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""967efb95-67b5-4678-86f2-ce85bdca06d1"",
                    ""path"": ""<XRController>{RightHand}/joystick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30b6e3eb-0bd8-47a1-9728-90a96d6032ec"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5b3ba0c-cd0d-4b6b-9e13-ec5b48903575"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Left
        m_Left = asset.FindActionMap("Left", throwIfNotFound: true);
        m_Left_Joystick = m_Left.FindAction("Joystick", throwIfNotFound: true);
        m_Left_Trigger = m_Left.FindAction("Trigger", throwIfNotFound: true);
        m_Left_Grip = m_Left.FindAction("Grip", throwIfNotFound: true);
        // Right
        m_Right = asset.FindActionMap("Right", throwIfNotFound: true);
        m_Right_Joystick = m_Right.FindAction("Joystick", throwIfNotFound: true);
        m_Right_Trigger = m_Right.FindAction("Trigger", throwIfNotFound: true);
        m_Right_Grip = m_Right.FindAction("Grip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Left
    private readonly InputActionMap m_Left;
    private ILeftActions m_LeftActionsCallbackInterface;
    private readonly InputAction m_Left_Joystick;
    private readonly InputAction m_Left_Trigger;
    private readonly InputAction m_Left_Grip;
    public struct LeftActions
    {
        private @Controllers m_Wrapper;
        public LeftActions(@Controllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @Joystick => m_Wrapper.m_Left_Joystick;
        public InputAction @Trigger => m_Wrapper.m_Left_Trigger;
        public InputAction @Grip => m_Wrapper.m_Left_Grip;
        public InputActionMap Get() { return m_Wrapper.m_Left; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftActions set) { return set.Get(); }
        public void SetCallbacks(ILeftActions instance)
        {
            if (m_Wrapper.m_LeftActionsCallbackInterface != null)
            {
                @Joystick.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnJoystick;
                @Joystick.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnJoystick;
                @Joystick.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnJoystick;
                @Trigger.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnTrigger;
                @Trigger.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnTrigger;
                @Trigger.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnTrigger;
                @Grip.started -= m_Wrapper.m_LeftActionsCallbackInterface.OnGrip;
                @Grip.performed -= m_Wrapper.m_LeftActionsCallbackInterface.OnGrip;
                @Grip.canceled -= m_Wrapper.m_LeftActionsCallbackInterface.OnGrip;
            }
            m_Wrapper.m_LeftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Joystick.started += instance.OnJoystick;
                @Joystick.performed += instance.OnJoystick;
                @Joystick.canceled += instance.OnJoystick;
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
                @Grip.started += instance.OnGrip;
                @Grip.performed += instance.OnGrip;
                @Grip.canceled += instance.OnGrip;
            }
        }
    }
    public LeftActions @Left => new LeftActions(this);

    // Right
    private readonly InputActionMap m_Right;
    private IRightActions m_RightActionsCallbackInterface;
    private readonly InputAction m_Right_Joystick;
    private readonly InputAction m_Right_Trigger;
    private readonly InputAction m_Right_Grip;
    public struct RightActions
    {
        private @Controllers m_Wrapper;
        public RightActions(@Controllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @Joystick => m_Wrapper.m_Right_Joystick;
        public InputAction @Trigger => m_Wrapper.m_Right_Trigger;
        public InputAction @Grip => m_Wrapper.m_Right_Grip;
        public InputActionMap Get() { return m_Wrapper.m_Right; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightActions set) { return set.Get(); }
        public void SetCallbacks(IRightActions instance)
        {
            if (m_Wrapper.m_RightActionsCallbackInterface != null)
            {
                @Joystick.started -= m_Wrapper.m_RightActionsCallbackInterface.OnJoystick;
                @Joystick.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnJoystick;
                @Joystick.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnJoystick;
                @Trigger.started -= m_Wrapper.m_RightActionsCallbackInterface.OnTrigger;
                @Trigger.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnTrigger;
                @Trigger.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnTrigger;
                @Grip.started -= m_Wrapper.m_RightActionsCallbackInterface.OnGrip;
                @Grip.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnGrip;
                @Grip.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnGrip;
            }
            m_Wrapper.m_RightActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Joystick.started += instance.OnJoystick;
                @Joystick.performed += instance.OnJoystick;
                @Joystick.canceled += instance.OnJoystick;
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
                @Grip.started += instance.OnGrip;
                @Grip.performed += instance.OnGrip;
                @Grip.canceled += instance.OnGrip;
            }
        }
    }
    public RightActions @Right => new RightActions(this);
    public interface ILeftActions
    {
        void OnJoystick(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
    }
    public interface IRightActions
    {
        void OnJoystick(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
    }
}
